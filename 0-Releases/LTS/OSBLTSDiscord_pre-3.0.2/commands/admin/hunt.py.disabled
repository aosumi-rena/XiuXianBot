# This is an old version of hunting (before the addition of elements buffs), thus it is very buggy and disabled

import discord
from discord.ext import commands
from utils.database import get_collection, DatabaseError
from utils.localisations import load_localisation
import random
import asyncio

# Admin IDs
admin_ids = [1234567890]

class AdminHuntCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def is_admin(self, user_id):
        return user_id in admin_ids

    @commands.command(name='admin:hunt')
    async def admin_hunt(self, ctx, times: int):
        if not self.is_admin(ctx.author.id):
            await ctx.send("You are not authorized to use this command!\n`ERR: UserAuthLv < admin_ids`")
            return

        if times > 75:
            await ctx.send("错误：单次模拟打野次数上限为75。\n`ERR: times > 75`")
            return

        if times <= 0:
            await ctx.send("错误：模拟打野次数需为整数。\n`ERR: times <= 0`")
            return

        processing_message = await ctx.send("处理中...")
        async def process_command():
            user_collection = get_collection('users')
            user = user_collection.find_one({"user_id": str(ctx.author.id)})
            if not user:
                return [f"{ctx.author.mention} You have not created an account. Please use `^start` to create one."]

            user_lang = user.get("lang", "CHS")
            stage = user.get("rank", 0)
            textmap = load_localisation(user_lang)
            stage_max_value = int(textmap['xx_stage_max'].get(str(stage), 0))

            total_cultivation_gain = 0
            total_copper_gain = 0
            total_yuanbao_gain = 0

            results = []
            for _ in range(times):
                cultivation_gain = random.randint(int(stage_max_value * 0.0005), int(stage_max_value * 0.005))
                copper_gain = random.randint(100, 500)
                yuanbao_gain = 0

                if stage < 14:
                    if random.random() < 0.006:
                        yuanbao_gain = 1
                    elif random.random() < 0.006**2:
                        yuanbao_gain = 2
                    elif random.random() < 0.006**3:
                        yuanbao_gain = 3
                    elif random.random() < 0.006**4:
                        yuanbao_gain = 4
                    elif random.random() < 0.006**5:
                        yuanbao_gain = 5000000
                elif 14 < stage < 23:
                    if random.random() < 0.012:
                        yuanbao_gain = 1
                    elif random.random() < 0.012**2:
                        yuanbao_gain = 2
                    elif random.random() < 0.012**3:
                        yuanbao_gain = 3
                    elif random.random() < 0.012**4:
                        yuanbao_gain = 4
                    elif random.random() < 0.012**5:
                        yuanbao_gain = 5
                    elif random.random() < 0.006**5:
                        yuanbao_gain = 5000000
                elif 23 <= stage <= 41:
                    if random.random() <= 0.24:
                        yuanbao_gain = 1
                    elif random.random() < 0.24**2:
                        yuanbao_gain = 2
                    elif random.random() < 0.24**3:
                        yuanbao_gain = 4
                    elif random.random() < 0.24**4:
                        yuanbao_gain = 6
                    elif random.random() < 0.24**5:
                        yuanbao_gain = 8
                    elif random.random() < 0.24**6:
                        yuanbao_gain = 16
                    elif random.random() < 0.006**5:
                        yuanbao_gain = 5000000
                elif stage >= 41:
                    if random.random() <= 0.5:
                        yuanbao_gain = 1
                    elif random.random() < 0.5**2:
                        yuanbao_gain = 2
                    elif random.random() < 0.5**3:
                        yuanbao_gain = 4
                    elif random.random() < 0.5**4:
                        yuanbao_gain = 6
                    elif random.random() < 0.5**5:
                        yuanbao_gain = 8
                    elif random.random() < 0.5**6:
                        yuanbao_gain = 16
                    elif random.random() < 0.5**7:
                        yuanbao_gain = 32
                    elif random.random() < 0.5**8:
                        yuanbao_gain = 64
                    elif random.random() < 0.5**9:
                        yuanbao_gain = 128
                    elif random.random() < 0.5**10:
                        yuanbao_gain = 256
                    elif random.random() < 0.006**5:
                        yuanbao_gain = 5000000

                total_cultivation_gain += cultivation_gain
                total_copper_gain += copper_gain
                total_yuanbao_gain += yuanbao_gain

                results.append(
                    f"获得：修为：{cultivation_gain}、铜币：{copper_gain}、元宝：{yuanbao_gain}"
                )

            user_collection.update_one(
                {"user_id": str(ctx.author.id)},
                {
                    "$inc": {
                        "exp": total_cultivation_gain,
                        "copper": total_copper_gain,
                        "gold": total_yuanbao_gain,
                        "dy_times": times
                    }
                }
            )

            results.append(f"\n总计：修为：{total_cultivation_gain}、铜币：{total_copper_gain}、元宝：{total_yuanbao_gain}")
            return results

        try:
            results = await asyncio.wait_for(process_command(), timeout=10)
            if results:
                embed = discord.Embed(
                    title="处理完成",
                    description="\n".join(f"{idx + 1}. {result}" for idx, result in enumerate(results)),
                    color=0x00f2ff
                )
                await processing_message.edit(content=None, embed=embed)
            else:
                embed = discord.Embed(title="处理失败，未知错误，请联系Bot管理员！", color=0x800000)
                await processing_message.edit(content=None, embed=embed)
        except asyncio.TimeoutError:
            await processing_message.edit(content="处理超时，请联系Bot管理员！")
        except DatabaseError:
            await processing_message.edit(content="数据库错误！请联系Bot管理员！")

async def setup(bot):
    await bot.add_cog(AdminHuntCommand(bot))
